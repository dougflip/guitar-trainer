/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedPracticeSessionsIndexRouteImport } from './routes/_authenticated/practice-sessions/index'
import { Route as AuthenticatedMetronomeIndexRouteImport } from './routes/_authenticated/metronome/index'
import { Route as AuthenticatedPracticeSessionsCreateRouteImport } from './routes/_authenticated/practice-sessions/create'
import { Route as AuthenticatedPracticeSessionsIdIndexRouteImport } from './routes/_authenticated/practice-sessions/$id/index'
import { Route as AuthenticatedPracticeSessionsIdPlayRouteImport } from './routes/_authenticated/practice-sessions/$id/play'

const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedPracticeSessionsIndexRoute =
  AuthenticatedPracticeSessionsIndexRouteImport.update({
    id: '/practice-sessions/',
    path: '/practice-sessions/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedMetronomeIndexRoute =
  AuthenticatedMetronomeIndexRouteImport.update({
    id: '/metronome/',
    path: '/metronome/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedPracticeSessionsCreateRoute =
  AuthenticatedPracticeSessionsCreateRouteImport.update({
    id: '/practice-sessions/create',
    path: '/practice-sessions/create',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedPracticeSessionsIdIndexRoute =
  AuthenticatedPracticeSessionsIdIndexRouteImport.update({
    id: '/practice-sessions/$id/',
    path: '/practice-sessions/$id/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedPracticeSessionsIdPlayRoute =
  AuthenticatedPracticeSessionsIdPlayRouteImport.update({
    id: '/practice-sessions/$id/play',
    path: '/practice-sessions/$id/play',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/practice-sessions/create': typeof AuthenticatedPracticeSessionsCreateRoute
  '/metronome': typeof AuthenticatedMetronomeIndexRoute
  '/practice-sessions': typeof AuthenticatedPracticeSessionsIndexRoute
  '/practice-sessions/$id/play': typeof AuthenticatedPracticeSessionsIdPlayRoute
  '/practice-sessions/$id': typeof AuthenticatedPracticeSessionsIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/practice-sessions/create': typeof AuthenticatedPracticeSessionsCreateRoute
  '/metronome': typeof AuthenticatedMetronomeIndexRoute
  '/practice-sessions': typeof AuthenticatedPracticeSessionsIndexRoute
  '/practice-sessions/$id/play': typeof AuthenticatedPracticeSessionsIdPlayRoute
  '/practice-sessions/$id': typeof AuthenticatedPracticeSessionsIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/_authenticated/practice-sessions/create': typeof AuthenticatedPracticeSessionsCreateRoute
  '/_authenticated/metronome/': typeof AuthenticatedMetronomeIndexRoute
  '/_authenticated/practice-sessions/': typeof AuthenticatedPracticeSessionsIndexRoute
  '/_authenticated/practice-sessions/$id/play': typeof AuthenticatedPracticeSessionsIdPlayRoute
  '/_authenticated/practice-sessions/$id/': typeof AuthenticatedPracticeSessionsIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/sign-in'
    | '/practice-sessions/create'
    | '/metronome'
    | '/practice-sessions'
    | '/practice-sessions/$id/play'
    | '/practice-sessions/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-in'
    | '/practice-sessions/create'
    | '/metronome'
    | '/practice-sessions'
    | '/practice-sessions/$id/play'
    | '/practice-sessions/$id'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/sign-in'
    | '/_authenticated/practice-sessions/create'
    | '/_authenticated/metronome/'
    | '/_authenticated/practice-sessions/'
    | '/_authenticated/practice-sessions/$id/play'
    | '/_authenticated/practice-sessions/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  SignInRoute: typeof SignInRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/practice-sessions/': {
      id: '/_authenticated/practice-sessions/'
      path: '/practice-sessions'
      fullPath: '/practice-sessions'
      preLoaderRoute: typeof AuthenticatedPracticeSessionsIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/metronome/': {
      id: '/_authenticated/metronome/'
      path: '/metronome'
      fullPath: '/metronome'
      preLoaderRoute: typeof AuthenticatedMetronomeIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/practice-sessions/create': {
      id: '/_authenticated/practice-sessions/create'
      path: '/practice-sessions/create'
      fullPath: '/practice-sessions/create'
      preLoaderRoute: typeof AuthenticatedPracticeSessionsCreateRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/practice-sessions/$id/': {
      id: '/_authenticated/practice-sessions/$id/'
      path: '/practice-sessions/$id'
      fullPath: '/practice-sessions/$id'
      preLoaderRoute: typeof AuthenticatedPracticeSessionsIdIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/practice-sessions/$id/play': {
      id: '/_authenticated/practice-sessions/$id/play'
      path: '/practice-sessions/$id/play'
      fullPath: '/practice-sessions/$id/play'
      preLoaderRoute: typeof AuthenticatedPracticeSessionsIdPlayRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedPracticeSessionsCreateRoute: typeof AuthenticatedPracticeSessionsCreateRoute
  AuthenticatedMetronomeIndexRoute: typeof AuthenticatedMetronomeIndexRoute
  AuthenticatedPracticeSessionsIndexRoute: typeof AuthenticatedPracticeSessionsIndexRoute
  AuthenticatedPracticeSessionsIdPlayRoute: typeof AuthenticatedPracticeSessionsIdPlayRoute
  AuthenticatedPracticeSessionsIdIndexRoute: typeof AuthenticatedPracticeSessionsIdIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedPracticeSessionsCreateRoute:
    AuthenticatedPracticeSessionsCreateRoute,
  AuthenticatedMetronomeIndexRoute: AuthenticatedMetronomeIndexRoute,
  AuthenticatedPracticeSessionsIndexRoute:
    AuthenticatedPracticeSessionsIndexRoute,
  AuthenticatedPracticeSessionsIdPlayRoute:
    AuthenticatedPracticeSessionsIdPlayRoute,
  AuthenticatedPracticeSessionsIdIndexRoute:
    AuthenticatedPracticeSessionsIdIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  SignInRoute: SignInRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
